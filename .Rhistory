library(shiny)
library(shinykeyboard)
library(httr)
install.packages(c("aws.signature", "httr", "shiny"))
shiny::runApp('Documents/D/touch-screen-pi-sonos-app')
install.packages(c("devtools", "htmlwidgets"))
devtools::install_github('Emelieh21/shinykeyboard')
devtools::install_github('Emelieh21/shinykeyboard')
runApp('Documents/D/touch-screen-pi-sonos-app')
runApp('Documents/D/touch-screen-pi-sonos-app')
# you can use this table as an example
distr_table <- data.frame(
X = rep(c(0, 1), each = 2),
Y = rep(c(1, 2), times = 2),
pr = c(0.3, 0.25, 0.15, 0.3)
)
check_independence <- function(distr_table) {
# write your solution here
}
View(distr_table)
# the chance for X to be 1 is 0.45
# the chance for X to be 0 is 0.55
# the chance for Y to be 1 is 0.45
# the chance for Y to be 2 is 0.55
library(dplyr)
x = distr_table
# assuming that pr is our probability column and all other columns are variables
columns <- names(x)[!names(x) %in% "pr"]
distr <- x %>%
group_by_at(vars(one_of(columns))) %>%
summarise(pr = sum(pr))
View(distr)
# assuming that pr is our probability column and all other columns are variables
tidyr::gather(x)
install.packages("tidyr")
# assuming that pr is our probability column and all other columns are variables
tidyr::gather(x, key=c(X,Y), value = pr)
# assuming that pr is our probability column and all other columns are variables
tidyr::gather(x, key=c("X","Y"), value = "pr")
?gather
# assuming that pr is our probability column and all other columns are variables
tidyr::gather(x, key=c("X"), value = "pr")
View(x)
x = distr_table
# assuming that pr is our probability column and all other columns are variables
tidyr::gather(x, key=c("X"), value = "pr")
dist <- x %>% gather(key = "pr", value = "pr")
library(tidyr)
dist <- x %>% gather(key = "pr", value = "pr")
View(dist)
dist <- x %>% gather(key = "pr", value = pr)
View(dist)
dist <- x %>% gather(key = pr, value = pr)
View(dist)
dist <- x %>% gather(key = pr, value = c(pr))
dist <- x %>% gather(key = pr, value = pr, convert = TRUE)
View(dist)
dist <- x %>% gather(key = pr, value = pr, -pr)
View(dist)
# assuming that pr is our probability column and all other columns are variables
a <- x[,c("X","pr")]
b <- x[,c("Y","pr")]
long <- rbind(a,b)
a$value <- "X"
b$value <- "Y"
names(b) <- names(a)
long <- rbind(a,b)
View(long)
dist <- long %>%
group_by(X,value) %>%
summarise(pr = sum(pr))
View(dist)
# assuming that pr is our probability column and all other columns are variables
# would have liked to do it without a loop but had to come up with something quick
long <- NULL
for (i in names(x)) {
a <- x[,c(i,"pr")]
a$key <- i
names(a) <- c("value","pr","key")
long <- rbind(long,a)
}
View(long)
# the chance for X to be 1 is 0.45
# the chance for X to be 0 is 0.55
# the chance for Y to be 1 is 0.45
# the chance for Y to be 2 is 0.55
library(dplyr)
for (i in names(x)[!names(x) %in% "pr"]) {
a <- x[,c(i,"pr")]
a$key <- i
names(a) <- c("value","pr","key")
long <- rbind(long,a)
}
# assuming that pr is our probability column and all other columns are variables
# would have liked to do it without a loop but had to come up with something quick
long <- NULL
for (i in names(x)[!names(x) %in% "pr"]) {
a <- x[,c(i,"pr")]
a$key <- i
names(a) <- c("value","pr","key")
long <- rbind(long,a)
}
dist <- long %>%
group_by(key,value) %>%
summarise(pr = sum(pr))
View(distr)
i = "X"
x_ <- merge(x, dist[dist$key == i],
by.x = i, by.y = value, all.x = T)
#for (i in names(x)[!names(x) %in% "pr"]) {
x_ <- merge(x, dist[dist$key == i],
by.x = i, by.y = value, all.x = T)
dist[dist$key == i],
dist[dist$key == i]
dist <- long %>%
group_by(key,value) %>%
summarise(pr = sum(pr)) %>%
ungroup()
#for (i in names(x)[!names(x) %in% "pr"]) {
x_ <- merge(x, dist[dist$key == i],
by.x = i, by.y = value, all.x = T)
i = "X"
dist[dist$key == i]
#for (i in names(x)[!names(x) %in% "pr"]) {
x_ <- merge(x, dist[dist$key == i,],
by.x = i, by.y = value, all.x = T)
#for (i in names(x)[!names(x) %in% "pr"]) {
x_ <- merge(x, dist[dist$key == i,],
by.x = i, by.y = "value",
all.x = T)
View(x_)
names(dist) <- gsub("pr",paste0("pr",i),names(dist))
x_ <- merge(x, dist[dist$key == i,],
by.x = i, by.y = "value",
all.x = T)
for (i in names(x)[!names(x) %in% "pr"]) {
names(dist) <- gsub("pr",paste0("pr",i),names(dist))
x <- merge(x, dist[dist$key == i,],
by.x = i, by.y = "value",
all.x = T)
}
View(x)
x = distr_table
# assuming that pr is our probability column and all other columns are variables
# would have liked to do it without a loop but had to come up with something quick
long <- NULL
for (i in names(x)[!names(x) %in% "pr"]) {
a <- x[,c(i,"pr")]
a$key <- i
names(a) <- c("value","pr","key")
long <- rbind(long,a)
}
dist <- long %>%
group_by(key,value) %>%
summarise(pr = sum(pr)) %>%
ungroup()
for (i in names(x)[!names(x) %in% "pr"]) {
names(dist) <- gsub("pr",paste0("pr",i),names(dist))
x <- merge(x, dist[dist$key == i,],
by.x = i, by.y = "value",
all.x = T)
}
x = distr_table
# assuming that pr is our probability column and all other columns are variables
# would have liked to do it without a loop but had to come up with something quick
long <- NULL
for (i in names(x)[!names(x) %in% "pr"]) {
a <- x[,c(i,"pr")]
a$key <- i
names(a) <- c("value","pr","key")
long <- rbind(long,a)
}
dist <- long %>%
group_by(key,value) %>%
summarise(pr = sum(pr)) %>%
ungroup()
dist_names <- names(dist)
for (i in names(x)[!names(x) %in% "pr"]) {
names(dist) <- gsub("pr",paste0("pr",i),dist_names)
x <- merge(x, dist[dist$key == i,],
by.x = i, by.y = "value",
all.x = T)
}
View(x)
# Check if probability of X * probability of Y corresponds to the pr value
x$independence <- x$prX*x$prY == x$pr
# Check if probability of X * probability of Y corresponds to the pr value
x$independence <- x$prX*x$prY #== x$pr
View(x)
check_independence <- function(x) {
# the chance for X to be 1 is 0.45
# the chance for X to be 0 is 0.55
# the chance for Y to be 1 is 0.45
# the chance for Y to be 2 is 0.55
library(dplyr)
# assuming that pr is our probability column and all other columns are variables
# would have liked to do it without a loop but had to come up with something quick
# Make a long table with all probabilties for each Y and X value
long <- NULL
for (i in names(x)[!names(x) %in% "pr"]) {
a <- x[,c(i,"pr")]
a$key <- i
names(a) <- c("value","pr","key")
long <- rbind(long,a)
}
# Calculate the probability of X and Y having a certain value
dist <- long %>%
group_by(key,value) %>%
summarise(pr = sum(pr)) %>%
ungroup()
dist_names <- names(dist)
# merge in the probability of having the observer X and Y values
for (i in names(x)[!names(x) %in% "pr"]) {
names(dist) <- gsub("pr",paste0("pr",i),dist_names)
x <- merge(x, dist[dist$key == i,],
by.x = i, by.y = "value",
all.x = T)
}
# Check if probability of X * probability of Y corresponds to the pr value
x$independence <- x$prX*x$prY == x$pr
if (FALSE in x$independence) {
result = FALSE
} else {
result = TRUE
}
return(result)
}
if (FALSE in x$independence) {
result = FALSE
} else {
result = TRUE
}
check_independence <- function(x) {
# the chance for X to be 1 is 0.45
# the chance for X to be 0 is 0.55
# the chance for Y to be 1 is 0.45
# the chance for Y to be 2 is 0.55
library(dplyr)
# assuming that pr is our probability column and all other columns are variables
# would have liked to do it without a loop but had to come up with something quick
# Make a long table with all probabilties for each Y and X value
long <- NULL
for (i in names(x)[!names(x) %in% "pr"]) {
a <- x[,c(i,"pr")]
a$key <- i
names(a) <- c("value","pr","key")
long <- rbind(long,a)
}
# Calculate the probability of X and Y having a certain value
dist <- long %>%
group_by(key,value) %>%
summarise(pr = sum(pr)) %>%
ungroup()
dist_names <- names(dist)
# merge in the probability of having the observer X and Y values
for (i in names(x)[!names(x) %in% "pr"]) {
names(dist) <- gsub("pr",paste0("pr",i),dist_names)
x <- merge(x, dist[dist$key == i,],
by.x = i, by.y = "value",
all.x = T)
}
# Check if probability of X * probability of Y corresponds to the pr value
x$independence <- x$prX*x$prY == x$pr
# if any of the results is false, we return a FALSE
if (FALSE %in% x$independence) {
result = FALSE
} else {
result = TRUE
}
return(result)
}
check_independence(distr_table)
shiny::runApp('Documents/D.nosync/times-up')
# https://shiny.rstudio.com/articles/shinyapps.html
# https://www.shinyapps.io/admin/#/tokens
rsconnect::setAccountInfo(name='emelieh21',
token='26B93C94D52DAC03640D9A2C4CB5DFF4',
secret='XbZiLeHvCnZirg6+wqEeRfC0nxfboO5qPlU05p0c')
# deploy app
library(rsconnect)
setwd('/Users/emeliehofland/Documents/D.nosync/times-up')
deployApp()
